\input texinfo                  @c -*- Texinfo -*-
@c This file is part of The Generic Security Service Manual.
@c Copyright (C) 2002, 2003 Simon Josefsson
@c See below for copying conditions.

@setfilename gss.info
@include version.texi
@settitle The Generic Security Service Manual.

@c Unify some of the indices.
@syncodeindex tp fn
@syncodeindex pg fn

@copying
This is @cite{The Generic Security Service Manual}, last updated
@value{UPDATED}, for Version @value{VERSION} of GPL GSS-API.

Copyright @copyright{} 2003 Simon Josefsson.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "GNU General Public License", with the
Front-Cover Texts being ``A GNU Manual,'' and with the Back-Cover
Texts as in (a) below.  A copy of the license is included in the
section entitled "GNU Free Documentation License".

(a) The FSF's Back-Cover Text is: ``You are free to copy and modify
this GNU Manual.  Buying copies from GNU Press supports the FSF in
developing GNU and protecting and promoting software freedom.''
@end quotation
@end copying

@dircategory Libraries
@direntry
* gss: (gss).			Generic Security Service API Library
@end direntry

@dircategory Utilities
@direntry
* gss: (gss)Invoking gss.	Command line interface to GSS Library.
@end direntry

@titlepage
@title The Generic Security Service Manual.
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Simon Josefsson (@email{bug-gss.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top The Generic Security Service Manual.

@insertcopying
@end ifnottex

@menu
* Introduction::                How to use this manual.
* Preparation::                 What you should do before using the library.
* Standard GSS API::            Reference documentation for the Standard API.
* Extended GSS API::            Non-standard functions.
* Invoking gss::                Command line interface to the library.
* Acknowledgements::            Whom to blame.

Appendices

* Criticism of GSS::            Why you maybe shouldn't use GSS.
* Copying::                     How you can copy and share GPL GSS-API.
* Copying This Manual::         How you can copy and share this manual.

Indices

* Concept Index::               Index of concepts and programs.
* Function and Data Index::     Index of functions, variables and data types.
@end menu

@c **********************************************************
@c *******************  Introduction  ***********************
@c **********************************************************
@node Introduction
@chapter Introduction

GPL GSS-API is an implementation of the Generic Security Service
Application Program Interface (GSS-API).  GSS-API is used by network
servers (e.g., IMAP, SMTP) to provide security security services,
e.g., authenticate clients against servers.

GPL GSS-API contains a library (`libgss), a command line utility
(`gss) to access the library from the shell, and a manual.

GPL GSS-API is developed for the GNU/Linux system, but runs on over 20
platforms including most major Unix platforms and Windows, and many
kind of devices including iPAQ handhelds and S/390 mainframes.

GPL GSS-API is licensed under the GNU Public License.

@menu
* Getting Started::
* Features::
* Supported Platforms::
* Bug Reports::
@end menu

@node Getting Started
@section Getting Started

This manual documents the GSS programming interface.  All functions
and data types provided by the library are explained.

The reader is assumed to possess basic familiarity with GSS-API and
network programming in C or C++.

This manual can be used in several ways.  If read from the beginning
to the end, it gives a good introduction into the library and how it
can be used in an application.  Forward references are included where
necessary.  Later on, the manual can be used as a reference manual to
get just the information needed about any particular interface of the
library.  Experienced programmers might want to start looking at the
examples at the end of the manual, and then only read up those parts
of the interface which are unclear.

@node Features
@section Features

GSS might have a couple of advantages over other libraries doing a
similar job.

@table @asis
@item It's Free Software
Anybody can use, modify, and redistribute it under the terms of the
GNU General Public License (@pxref{Copying}).

@item It's thread-safe
No global variables are used and multiple library handles and session
handles may be used in parallell.

@item It's internationalized
It handles non-ASCII username and passwords and user visible strings
used in the library (error messages) can be translated into the users'
language.

@item It's portable
It should work on all Unix like operating systems, including Windows.

@end table

Note that the library do not implement any policy to decide whether a
certain user is ``authenticated'' or ``authorized'' or not.  Rather,
it uses callbacks back into the application to answer these questions.

@node Supported Platforms
@section Supported Platforms

GSS has at some point in time been tested on the following platforms.

@enumerate

@item Debian GNU/Linux 3.0 (Woody)
@cindex Debian

GCC 2.95.4 and GNU Make. This is the main development platform.
@code{alphaev67-unknown-linux-gnu}, @code{alphaev6-unknown-linux-gnu},
@code{arm-unknown-linux-gnu}, @code{hppa-unknown-linux-gnu},
@code{hppa64-unknown-linux-gnu}, @code{i686-pc-linux-gnu},
@code{ia64-unknown-linux-gnu}, @code{m68k-unknown-linux-gnu},
@code{mips-unknown-linux-gnu}, @code{mipsel-unknown-linux-gnu},
@code{powerpc-unknown-linux-gnu}, @code{s390-ibm-linux-gnu},
@code{sparc-unknown-linux-gnu}.

@item Debian GNU/Linux 2.1
@cindex Debian

GCC 2.95.1 and GNU Make. @code{armv4l-unknown-linux-gnu}.

@item Tru64 UNIX
@cindex Tru64

Tru64 UNIX C compiler and Tru64 Make. @code{alphaev67-dec-osf5.1},
@code{alphaev68-dec-osf5.1}.

@item SuSE Linux 7.1
@cindex SuSE

GCC 2.96 and GNU Make. @code{alphaev6-unknown-linux-gnu},
@code{alphaev67-unknown-linux-gnu}.

@item SuSE Linux 7.2a
@cindex SuSE Linux

GCC 3.0 and GNU Make. @code{ia64-unknown-linux-gnu}.

@item RedHat Linux 7.2
@cindex RedHat

GCC 2.96 and GNU Make. @code{alphaev6-unknown-linux-gnu},
@code{alphaev67-unknown-linux-gnu}, @code{ia64-unknown-linux-gnu}.

@item RedHat Linux 8.0
@cindex RedHat

GCC 3.2 and GNU Make. @code{i686-pc-linux-gnu}.

@item RedHat Advanced Server 2.1
@cindex RedHat Advanced Server

GCC 2.96 and GNU Make. @code{i686-pc-linux-gnu}.

@item Slackware Linux 8.0.01
@cindex RedHat

GCC 2.95.3 and GNU Make. @code{i686-pc-linux-gnu}.

@item Mandrake Linux 9.0
@cindex Mandrake

GCC 3.2 and GNU Make. @code{i686-pc-linux-gnu}.

@item IRIX 6.5
@cindex IRIX

MIPS C compiler, IRIX Make. @code{mips-sgi-irix6.5}.

@item AIX 4.3.2
@cindex AIX

IBM C for AIX compiler, AIX Make.  @code{rs6000-ibm-aix4.3.2.0}.

@item Microsoft Windows 2000 (Cygwin)
@cindex Windows

GCC 3.2, GNU make. @code{i686-pc-cygwin}.

@item HP-UX 11
@cindex HP-UX

HP-UX C compiler and HP Make. @code{ia64-hp-hpux11.22},
@code{hppa2.0w-hp-hpux11.11}.

@item SUN Solaris 2.8
@cindex Solaris

Sun WorkShop Compiler C 6.0 and SUN Make. @code{sparc-sun-solaris2.8}.

@item NetBSD 1.6
@cindex NetBSD

GCC 2.95.3 and GNU Make. @code{alpha-unknown-netbsd1.6},
@code{i386-unknown-netbsdelf1.6}.

@item OpenBSD 3.1 and 3.2
@cindex OpenBSD

GCC 2.95.3 and GNU Make. @code{alpha-unknown-openbsd3.1},
@code{i386-unknown-openbsd3.1}.

@item FreeBSD 4.7
@cindex FreeBSD

GCC 2.95.4 and GNU Make. @code{alpha-unknown-freebsd4.7},
@code{i386-unknown-freebsd4.7}.

@end enumerate

If you use GSS on, or port GSS to, a new platform please report it to
the author.

@node Bug Reports
@section Bug Reports
@cindex Reporting Bugs

If you think you have found a bug in GSS, please investigate it and
report it.

@itemize @bullet

@item Please make sure that the bug is really in GSS, and
preferably also check that it hasn't already been fixed in the latest
version.

@item You have to send us a test case that makes it possible for us to
reproduce the bug.

@item You also have to explain what is wrong; if you get a crash, or
if the results printed are not good and in that case, in what way.
Make sure that the bug report includes all information you would need
to fix this kind of bug for someone else.

@end itemize

Please make an effort to produce a self-contained report, with
something definite that can be tested or debugged.  Vague queries or
piecemeal messages are difficult to act on and don't help the
development effort.

If your bug report is good, we will do our best to help you to get a
corrected version of the software; if the bug report is poor, we won't
do anything about it (apart from asking you to send better bug
reports).

If you think something in this manual is unclear, or downright
incorrect, or if the language needs to be improved, please also send a
note.

Send your bug report to:

@center @samp{bug-gss@@josefsson.org}


@c **********************************************************
@c *******************  Preparation  ************************
@c **********************************************************
@node Preparation
@chapter Preparation

To use GSS, you have to perform some changes to your sources and the
build system.  The necessary changes are small and explained in the
following sections.  At the end of this chapter, it is described how
the library is initialized, and how the requirements of the library
are verified.

A faster way to find out how to adapt your application for use with
GSS may be to look at the examples at the end of this manual.

@menu
* Header::
* Initialization::
* Version Check::
* Building the source::
@end menu

@node Header
@section Header

All interfaces (data types and functions) of the library are defined
in the header file `gssapi.h'.  You must include this in all programs
using the library, either directly or through some other header file,
like this:

@example
#include <gssapi.h>
@end example

The name space of `Libggssapi' is @code{gssapi_*} for function names,
@code{gss_*} for data types and @code{GSS_*} for other symbols.  In
addition the same name prefixes with one prepended underscore are
reserved for internal use and should never be used by an application.

@node Initialization
@section Initialization

`Libggssapi' must be initialized before it can be used.  The library is
initialized by calling @code{ggssapi_init()}.
The resources allocated by the initialization process can be released
if the application no longer has a need to call `Libggssapi' functions,
this is done by calling @code{ggssapi_done()}.

In order to take advantage of the internationalisation features in
`Libggssapi', such as translated error messages, the application must
set the current locale using @code{setlocale()} before initializing
`Libggssapi'.

In order to take advantage of the secure memory features in
`Libgcrypt', which subsequently makes sensitive key material used in
`Libggssapi' be allocated in secure memory, you need to initialize
secure memory in your application, and for some platforms even make
your application setuid root.  See the libgcrypt documentation for
more information.  Example code to initialize secure memory in your
code:

@example
#include <gcrypt.h>
...

int
main (int argc, char *argv[])
@{
...

  /* Check version of libgcrypt. */
  if (!gcry_check_version (GCRYPT_VERSION))
    die ("version mismatch\n");

  /* Allocate a pool of 16k secure memory.  This also drops priviliges
     on some systems. */
  gcry_control (GCRYCTL_INIT_SECMEM, 16384, 0);

  /* Tell Libgcrypt that initialization has completed. */
  gcry_control (GCRYCTL_INITIALIZATION_FINISHED, 0);
  ...
@end example

If you do not do this, keying material will not be allocated in secure
memory, which for most application is not the biggest secure problem.
Note that `Libggssapi' has not been audited to make sure it only ever
stores passwords or keys in secure memory.

@node Version Check
@section Version Check

It is often desirable to check that the version of `Libggssapi' used is
indeed one which fits all requirements.  Even with binary compatibility
new features may have been introduced but due to problem with the
dynamic linker an old version is actually used.  So you may want to
check that the version is okay right after program startup.

@include gss-api-version.texi

The normal way to use the function is to put something similar to the
following early in your @code{main()}:

@example
  if (!ggssapi_check_version (GGSSAPI_VERSION))
    @{
      printf ("ggssapi_check_version() failed:\n"
              "Header file incompatible with shared library.\n");
      exit(1);
    @}
@end example

@node Building the source
@section Building the source
@cindex Compiling your application

If you want to compile a source file including the `ggssapi.h' header
file, you must make sure that the compiler can find it in the
directory hierarchy.  This is accomplished by adding the path to the
directory in which the header file is located to the compilers include
file search path (via the @option{-I} option).

However, the path to the include file is determined at the time the
source is configured.  To solve this problem, `Libggssapi' uses the
external package @command{pkg-config} that knows the path to the
include file and other configuration options.  The options that need
to be added to the compiler invocation at compile time are output by
the @option{--cflags} option to @command{pkg-config libggssapi}.  The
following example shows how it can be used at the command line:

@example
gcc -c foo.c `pkg-config libggssapi --cflags`
@end example

Adding the output of @samp{pkg-config libggssapi --cflags} to the
compilers command line will ensure that the compiler can find the
`ggssapi.h' header file.

A similar problem occurs when linking the program with the library.
Again, the compiler has to find the library files.  For this to work,
the path to the library files has to be added to the library search path
(via the @option{-L} option).  For this, the option @option{--libs} to
@command{pkg-config libggssapi} can be used.  For convenience, this option
also outputs all other options that are required to link the program
with the `libggssapi' libarary (for instance, the @samp{-lidn}
option).  The example shows how to link @file{foo.o} with the `libggssapi'
library to a program @command{foo}.

@example
gcc -o foo foo.o `pkg-config libggssapi --libs`
@end example

Of course you can also combine both examples to a single command by
specifying both options to @command{pkg-config}:

@example
gcc -o foo foo.c `pkg-config libggssapi --cflags --libs`
@end example

@c **********************************************************
@c ************** Generic Security Services  ****************
@c **********************************************************
@node Standard GSS API
@chapter Standard GSS API

As an alternative to the native Shishi programming API, it is possible
to program Shishi through the Generic Security Services (GSS) API.
The advantage of using GSS-API in your security application, instead
of the native Shishi API, is that it will be easier to port your
application between different Kerberos 5 implementations, and even
beyond Kerberos 5 to different security systems, that support GSS-API.

In the free software world, however, the only widely used security
system that supports GSS-API is Kerberos 5, so this advantage is
somewhat academic.  But if you are porting applications using GSS-API
for other Kerberos 5 implementations, or want a more mature and stable
API than the native Shishi API, you may find using Shishi's GSS-API
interface compelling.  Note that GSS-API only offer basic services,
for more advanced uses you must use the native API.

The remaining part of this section assume you are familiar with
GSS-API in general, and only describe how to hook up your application
written using GSS-API with Shishi.  For general GSS-API information,
and some programming examples, a good guide is available online at
@url{http://docs.sun.com/db/doc/816-1331}.

Shishi exposes the GSS-API through the standard `gssapi.h' header file
and the library `libshishi-gss'.  To avoid conflicting with other
GSS-API implementations on your system, the header file is installed
in a sub-directory `shishi/' under the header file location specified
when building Shishi.  You must include this in all programs using the
library, either directly or through some other header file, like this:

@example
#include <shishi/gssapi.h>
@end example

The library `libshishi-gss' is installed in the normal object code
library location.

To facilitate finding the proper parameters for your compiler, the
@command{pkg-config} tool can be used.  Compile your application
@file{foo.c} with the Shishi GSS interface like this:

@example
gcc -o foo foo.c `pkg-config shishi-gss --cflags --libs`
@end example

Of course you do not need to use both @option{--cflags} and
@option{--libs} at the same time, see the full discussion elsewhere in
this manual (@pxref{Building the source}), but note that you must use
`shishi-gss' instead of `shishi' as the library parameter to
@command{pkg-config}.

@menu
* Credential Management::	Standard GSS credential functions.
* Context-Level Routines::	Standard GSS context functions.
* Per-Message Routines::	Standard GSS per-message functions.
* Name Manipulation::		Standard GSS name manipulation functions.
* Miscellaneous Routines::	Standard miscellaneous functions.
@end menu

@node Credential Management
@section Credential Management

@verbatim
   Table 2-1  GSS-API Credential-management Routines

   Routine                Section              Function
   -------                -------              --------
   gss_acquire_cred           5.2  Assume a global identity; Obtain
                                   a GSS-API credential handle for
                                   pre-existing credentials.
   gss_add_cred               5.3  Construct credentials
                                   incrementally
   gss_inquire_cred           5.21 Obtain information about a
                                   credential
   gss_inquire_cred_by_mech   5.22 Obtain per-mechanism information
                                   about a credential.
   gss_release_cred           5.27 Discard a credential handle.
@end verbatim

@include gss-api-cred.texi

@node Context-Level Routines
@section Context-Level Routines

@verbatim
   Table 2-2  GSS-API Context-Level Routines

   Routine                 Section              Function
   -------                 -------              --------
   gss_init_sec_context       5.19 Initiate a security context with
                                   a peer application
   gss_accept_sec_context     5.1  Accept a security context
                                   initiated by a
                                   peer application
   gss_delete_sec_context     5.9  Discard a security context
   gss_process_context_token  5.25 Process a token on a security
                                   context from a peer application
   gss_context_time           5.7  Determine for how long a context
                                   will remain valid
   gss_inquire_context        5.20 Obtain information about a
                                   security context
   gss_wrap_size_limit        5.34 Determine token-size limit for
                                   gss_wrap on a context
   gss_export_sec_context     5.14 Transfer a security context to
                                   another process
   gss_import_sec_context     5.17 Import a transferred context
@end verbatim

@include gss-api-context.texi

@node Per-Message Routines
@section Per-Message Routines

@verbatim
   Table 2-3  GSS-API Per-message Routines

   Routine                 Section              Function
   -------                 -------              --------
   gss_get_mic                5.15 Calculate a cryptographic message
                                   integrity code (MIC) for a
                                   message; integrity service
   gss_verify_mic             5.32 Check a MIC against a message;
                                   verify integrity of a received
                                   message
   gss_wrap                   5.33 Attach a MIC to a message, and
                                   optionally encrypt the message
                                   content;
                                   confidentiality service
   gss_unwrap                 5.31 Verify a message with attached
                                   MIC, and decrypt message content
                                   if necessary.
@end verbatim

@include gss-api-msg.texi

@node Name Manipulation
@section Name Manipulation

@verbatim
   Table 2-4  GSS-API Name manipulation Routines

   Routine                 Section              Function
   -------                 -------              --------
   gss_import_name            5.16 Convert a contiguous string name
                                   to internal-form
   gss_display_name           5.10 Convert internal-form name to
                                   text
   gss_compare_name           5.6  Compare two internal-form names

   gss_release_name           5.28 Discard an internal-form name
   gss_inquire_names_for_mech 5.24 List the name-types supported by
                                   the specified mechanism
   gss_inquire_mechs_for_name 5.23 List mechanisms that support the
                                   specified name-type
   gss_canonicalize_name      5.5  Convert an internal name to an MN
   gss_export_name            5.13 Convert an MN to export form
   gss_duplicate_name         5.12 Create a copy of an internal name
@end verbatim

@include gss-api-name.texi

@node Miscellaneous Routines
@section Miscellaneous Routines

@verbatim
   Table 2-5  GSS-API Miscellaneous Routines

   Routine                Section              Function
   -------                -------              --------
   gss_add_oid_set_member    5.4  Add an object identifier to
                                  a set
   gss_display_status        5.11 Convert a GSS-API status code
                                  to text
   gss_indicate_mechs        5.18 Determine available underlying
                                  authentication mechanisms
   gss_release_buffer        5.26 Discard a buffer
   gss_release_oid_set       5.29 Discard a set of object
                                  identifiers
   gss_create_empty_oid_set  5.8  Create a set containing no
                                  object identifiers
   gss_test_oid_set_member   5.30 Determines whether an object
                                       identifier is a member of a set.
@end verbatim

@include gss-api-misc.texi

@c **********************************************************
@c ************** Generic Security Services  ****************
@c **********************************************************
@node Extended GSS API
@chapter Extended GSS API

@include gss-api-version.texi

@c **********************************************************
@c *******************  Invoking ggssapi  *******************
@c **********************************************************
@node Invoking gss
@chapter Invoking gss

@pindex gss
@cindex invoking @command{gss}
@cindex command line

@majorheading Name

GPL GSS-API (gss) -- Generic Security Service command line interface

@majorheading Description
@code{gss} is the main program of GPL GSS-API.

This section only lists the commands and options available.

Mandatory or optional arguments to long options are also mandatory or
optional for any corresponding short options.

@c **********************************************************
@c *******************  Acknowledgements  *******************
@c **********************************************************
@node Acknowledgements
@chapter Acknowledgements

TBA

@c **********************************************************
@c *******************  Appendices  *************************
@c **********************************************************

@node Criticism of GSS
@appendix Criticism of GSS

The author has doubts whether GSS is a good solution.  We express
these doubts in this section.  GSS can be criticized on several
levels.  We start with the actual implementation.

GSS do not appear to be designed by experienced C programmers.  While
generally this may be a good thing (C is a poor language), but since
they defined the API in C, it is unfortunate.  The primary evidence of
this is the major_status and minor_status error code solution.  It is
a complicated way to describe error conditions, but what makes matters
worse, the error condition is separated; half of the error condition
is in the function return value and the other half is in the first
argument to the function, which is always a pointer to an integer.
(The pointer is not even allowed to be NULL, if the application
doesn't care about the minor error code.)  This makes the API
unreadable, and difficult to use.  A better solutions would be to
return a struct containing the entire error condition, which can be
accessed using macros, although we acknowledge that the C language
used at the time may not have allowed this (this may in fact be the
reason the awkward solution was chosen).  Instead, the return value
could have been passed back to callers using a pointer to a struct,
accessible using various macros, and the function could have a void
prototype.  The fact that minor_status is placed first in the
parameter list increases the pain it is to use the API.  Important
parameters should be placed first. A better place for minor_status
would have been last in the prototypes.

Another evidence of the C inexperience are the memory management
issues; GSS provides functions to deallocate data stored within, e.g.,
gss_buffer_t but the caller is responsible of deallocating the
gss_buffer_t struct itself.  Memory management issues are error prone,
and this division easily leads to memory leaks (or worse).  Instead,
the API should be the sole owner of all gss_ctx_id_t, gss_cred_id_t,
and gss_buffer_t structures: they should be allocated by the library,
and deallocated (using the utility functions defined for this purpose)
by the library.

TBA: high-level criticism.

We also note that very few free security systems uses GSS, perhaps the
only exception to this are Kerberos 5 implementations.  This suggest
that the GSS may not have been so ``generic'' as it was thought to be.

Our conclusion is that any new project that is looking for a security
framework, that is independent of any particular implementation,
should look elsewhere.  In particular SASL is recommended.  The most
compelling argument is that SASL is, as its acronym suggest, Simple,
whereas GSS is not, in any regard.

@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@include fdl.texi

@include gpl.texi

@node Concept Index
@unnumbered Concept Index

@printindex cp

@node Function and Data Index
@unnumbered Function and Data Index

@printindex fn

@summarycontents
@contents
@bye
